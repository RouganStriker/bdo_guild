# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2018-04-13 01:27
from __future__ import unicode_literals

from django.db import migrations
from django.db.models import Case, Count, F, FloatField, OuterRef, Subquery, Sum, When


def populate_aggregated_table(apps, schema_editor):
    """Make the first character the main."""
    AggregatedGuildMemberWarStats = apps.get_model('bdo', 'AggregatedGuildMemberWarStats')
    AggregatedGuildWarStats = apps.get_model('bdo', 'AggregatedGuildWarStats')
    AggregatedUserWarStats = apps.get_model('bdo', 'AggregatedUserWarStats')
    Guild = apps.get_model('bdo', 'Guild')
    GuildMember = apps.get_model('bdo', 'GuildMember')
    Profile = apps.get_model('bdo', 'Profile')
    WarAttendance = apps.get_model('bdo', 'WarAttendance')
    WarStat = apps.get_model('bdo', 'WarStat')

    fields = [
        'command_post',
        'death',
        'fort',
        'gate',
        'guild_master',
        'help',
        'id',
        'member',
        'mount',
        'officer',
        'placed_objects',
        'siege_weapons'
    ]
    attendance_field_annotations = {
        "wars_attended": Count('*')
    }

    base_field_annotations = {
        field: Sum(field)
        for field in fields
    }
    extended_field_annotations = {
        **base_field_annotations,
        **attendance_field_annotations
    }
    missed_qs = (WarAttendance.objects.filter(user_profile_id=OuterRef('user_profile'))
                                      .values('user_profile_id')
                                      .order_by('user_profile_id')
                                      .annotate(war_missed=Count(Case(When(is_attending=3, then=1))))
                                      .values('war_missed'))
    unavailable_qs = (WarAttendance.objects.filter(user_profile_id=OuterRef('user_profile'))
                                           .values('user_profile_id')
                                           .order_by('user_profile_id')
                                           .annotate(war_missed=Count(Case(When(is_attending=1, then=1))))
                                           .values('war_missed'))
    total_kills_expr = F('guild_master') + F('officer') + F('member') + F('siege_weapons')
    kdr_expr = Case(When(death=0, then=0.0),
                    default=(total_kills_expr * 1.0 / F('death')),
                    output_field=FloatField())

    # Calculate aggregated guild stats
    guild_stats = (
        WarStat.objects.values('attendance__war__guild')
                       .annotate(**base_field_annotations)
    )
    aggregated_stats = [
        AggregatedGuildWarStats(
            guild_id=guild_stat['attendance__war__guild'],
            **{
                field: value
                for field, value in guild_stat.items()
                if field not in ['attendance__war__guild', 'id']
            }
        )
        for guild_stat in guild_stats
    ]
    AggregatedGuildWarStats.objects.bulk_create(aggregated_stats)

    # Calculate the total kills and kdr stats
    AggregatedGuildMemberWarStats.objects.update(total_kills=total_kills_expr, kdr=kdr_expr)

    # Calculate aggregated guild member stats
    guild_member_stats = (WarStat.objects.values('attendance__war__guild', 'attendance__user_profile')
                                         .annotate(**extended_field_annotations))
    aggregated_stats = [
        AggregatedGuildMemberWarStats(
            guild_id=member_stat['attendance__war__guild'],
            user_profile_id=member_stat['attendance__user_profile'],
            **{
                field: value
                for field, value in member_stat.items()
                if field not in ['attendance__war__guild', 'attendance__user_profile', 'id']
            }
        )
        for member_stat in guild_member_stats
    ]
    AggregatedGuildMemberWarStats.objects.bulk_create(aggregated_stats)

    # Calculate the missed, unavailable, total kills and kdr stats
    (AggregatedGuildMemberWarStats.objects.annotate(missed=Subquery(missed_qs),
                                                    unavailable=Subquery(unavailable_qs))
                                          .update(wars_missed=F('missed'),
                                                  wars_unavailable=F('unavailable'),
                                                  total_kills=total_kills_expr,
                                                  kdr=kdr_expr))

    # Calculate aggregated user stats
    user_stats = (
        WarStat.objects.values('attendance__user_profile')
                       .annotate(**extended_field_annotations)
    )

    AggregatedUserWarStats.objects.bulk_create([
        AggregatedUserWarStats(
            user_profile_id=user_stat['attendance__user_profile'],
            **{
                field: value
                for field, value in user_stat.items()
                if field not in ['attendance__user_profile', 'id']
            }
        )
        for user_stat in user_stats
    ])

    # Calculate the missed, unavailable, total kills and kdr stats
    (AggregatedUserWarStats.objects.annotate(missed=Subquery(missed_qs),
                                             unavailable=Subquery(unavailable_qs))
                                   .update(wars_missed=F('missed'),
                                           wars_unavailable=F('unavailable'),
                                           total_kills=total_kills_expr,
                                           kdr=kdr_expr))

    # Generate stub rows
    AggregatedGuildWarStats.objects.bulk_create([
        AggregatedGuildWarStats(guild=guild)
        for guild in Guild.objects.exclude(id__in=AggregatedGuildWarStats.objects.values_list('guild'))
    ])

    member_tuples = AggregatedGuildMemberWarStats.objects.values_list('guild', 'user_profile')
    new_aggregated_members = []

    for member in GuildMember.objects.all():
        if (member.guild_id, member.user_id) in member_tuples:
            continue

        new_aggregated_members.append(AggregatedGuildMemberWarStats(guild=member.guild,
                                                                    user_profile=member.user))
    AggregatedGuildMemberWarStats.objects.bulk_create(new_aggregated_members)

    AggregatedGuildMemberWarStats.objects.bulk_create([
        AggregatedGuildMemberWarStats(guild=guild)
        for guild in Guild.objects.exclude(id__in=AggregatedGuildWarStats.objects.values_list('guild'))
    ])

    AggregatedUserWarStats.objects.bulk_create([
        AggregatedUserWarStats(user_profile=profile)
        for profile in Profile.objects.exclude(id__in=AggregatedUserWarStats.objects.values_list('user_profile'))
    ])


class Migration(migrations.Migration):

    dependencies = [
        ('bdo', '0010_add_aggregated_tables'),
    ]

    operations = [
        migrations.RunPython(populate_aggregated_table)
    ]
